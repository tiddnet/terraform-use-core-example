# security groups (443, 80) 0.0.0.0/0
# S3 bucket
# instance c3.xlarge

# elb 
# - 80, 443  no stickiness
# - security group
# - idle timeout 60 seconds
# - access logs - enabled 5 minutes S3 location 
# - Cross-zone load balancing enabled.

data "aws_ami" "WURFLjs-green" {
  most_recent = true

  filter {
    name   = "tag:Product"
    values = ["WURFL.js"]
  }

  filter {
    name   = "tag:Color"
    values = ["Green"]
  }

  owners = ["self"] # Canonical
}

#data "aws_ami" "WURFLjs-blue" {
#  most_recent = true
#
#  filter {
#    name   = "tag:Product"
#    values = ["WURFL.js"]
#  }
#
#  filter {
#    name   = "tag:Color"
#    values = ["Blue"]
#  }
#
#  owners = ["self"] # Canonical
#}
#
## blue
#
#resource "aws_elb" "WURFLjs-BE-blue" {
#  name    = "WURFLjs-BE-blue"
#  subnets = ["${aws_subnet.public-subnet.*.id}"]
#
#  listener {
#    instance_port     = 80
#    instance_protocol = "http"
#    lb_port           = 80
#    lb_protocol       = "http"
#  }
#
##  listener {
##    instance_port     = 443 
##    instance_protocol = "https"
##    lb_port           = 443
##    lb_protocol       = "https"
##  }
#
#  health_check {
#    healthy_threshold   = 6 
#    unhealthy_threshold = 10 
#    timeout             = 10
#    target              = "HTTP:80/"
#    interval            = 30
#  }
#}
#
resource "aws_elb" "WURFLjs-BE-green" {
  name    = "WURFLjs-BE-green"
  subnets = ["${aws_subnet.public-subnet.*.id}"]

  listener {
    instance_port     = 80
    instance_protocol = "http"
    lb_port           = 80
    lb_protocol       = "http"
  }

  #  listener {
  #    instance_port     = 443 
  #    instance_protocol = "https"
  #    lb_port           = 443
  #    lb_protocol       = "https"
  #  }

  health_check {
    healthy_threshold   = 6
    unhealthy_threshold = 10
    timeout             = 10
    target              = "HTTP:80/"
    interval            = 30
  }
  
  cross_zone_load_balancing = true
  idle_timeout = 400
  connection_draining = true
  connection_draining_timeout = 400

}

#resource "aws_launch_configuration" "WURFLjs-BE-blue" {
#  name_prefix   = "WURFLjs-BE_"
#  image_id      = "${data.aws_ami.WURFLjs-blue.id}"
#  instance_type = "m4.large"
#  spot_price    = "0.03"
#
#  security_groups = []
#
#  # may want to remove this, or abstract it.
#  root_block_device {
#    volume_size           = "30"
#    volume_type           = "gp2"
#    delete_on_termination = true
#  }
#
#  lifecycle {
#    create_before_destroy = true
#  }
#}
#
#resource "aws_autoscaling_group" "WURFLjs-BE-blue" {
#  name                 = "WURFL.js BE (B) - ${aws_launch_configuration.WURFLjs-BE-blue.name}"
#  min_size             = "${var.WURFLjs-BE-blue_min_size}"
#  max_size             = "${var.WURFLjs-BE-blue_max_size}"
#  min_elb_capacity     = "${var.WURFLjs-BE-blue_min_size}"
#  launch_configuration = "${aws_launch_configuration.WURFLjs-BE-blue.id}"
#  health_check_type    = "EC2"
#  load_balancers       = ["${aws_elb.WURFLjs-BE-blue.id}"]
#  termination_policies = ["OldestLaunchConfiguration"]
#  vpc_zone_identifier  = ["${aws_subnet.public-subnet.*.id}"]
#
#  lifecycle {
#    create_before_destroy = true
#  }
#}
#
# green
resource "aws_launch_configuration" "WURFLjs-BE-green" {
  name_prefix   = "WURFLjs-BE_"
  image_id      = "${data.aws_ami.WURFLjs-green.id}"
  instance_type = "m4.large"
  spot_price    = "0.03"

  security_groups = [ "${aws_security_group.instance.id}" ]


  # may want to remove this, or abstract it.
  root_block_device {
    volume_size           = "30"
    volume_type           = "gp2"
    delete_on_termination = true
  }

#  lifecycle {
#    create_before_destroy = true
#  }
}

resource "aws_autoscaling_group" "WURFLjs-BE-green" {
  name                 = "WURFL.js BE (G) - ${aws_launch_configuration.WURFLjs-BE-green.name}"
  min_size             = "${var.WURFLjs-BE-green_min_size}"
  max_size             = "${var.WURFLjs-BE-green_max_size}"
  min_elb_capacity     = "${var.WURFLjs-BE-green_min_size}"
  launch_configuration = "${aws_launch_configuration.WURFLjs-BE-green.id}"
  health_check_type    = "ELB"
  load_balancers       = ["${aws_elb.WURFLjs-BE-green.id}"]
  termination_policies = ["OldestLaunchConfiguration"]
  vpc_zone_identifier  = ["${aws_subnet.public-subnet.*.id}"]

  lifecycle {
    create_before_destroy = true
  }
}


resource "aws_security_group" "instance" {
  name = "http"
  vpc_id      = "${aws_vpc.main.id}"

  # Inbound HTTP from anywhere
  ingress {
    from_port = "80"
    to_port = "80"
    protocol = "tcp"
    cidr_blocks = ["0.0.0.0/0"]
  }

  # aws_launch_configuration.launch_configuration in this module sets create_before_destroy to true, which means
  # everything it depends on, including this resource, must set it as well, or you'll get cyclic dependency errors
  # when you try to do a terraform destroy.
  lifecycle {
    create_before_destroy = true
  }
}
